#fix ZSH -  perform field splitting - http://zsh.sourceforge.net/Doc/Release/Options.html
if [ -n "$ZSH_VERSION" ]
then
    setopt SH_WORD_SPLIT
fi

# helper functions
alias _inline_fzf="fzf --multi --ansi -i -1 --height=50% --reverse -0 --header-lines=1 --inline-info --border"
alias _inline_fzf_nh="fzf --multi --ansi -i -1 --height=50% --reverse -0 --inline-info --border"

_isClusterSpaceObject() {
  # caller is responsible for assuring non-empty "$1"
  obj="$1"
  microk8s.kubectl api-resources --namespaced=false \
        | awk '(apiidx){print substr($0, 0, apiidx),substr($0, kindidx) } (!apiidx){ apiidx=index($0, " APIGROUP");kindidx=index($0, " KIND")}' \
    | grep -iq "\<${obj}\>"
}
# [mk] like g for git but 233% as effective!
alias mk="microk8s.kubectl"

# [mkw] kw get po,svc,md
alias mkw="watch microk8s.kubectl get"

# [mka] get all pods in namespace
alias mka="microk8s.kubectl get pods"

# [mkall] get all pods in cluster
alias mkall="microk8s.kubectl get pods --all-namespaces"

# [mkwa] watch all pods in the current namespace
alias mkwa="watch microk8s.kubectl get pods"

# [mkwall] watch all pods in cluster
alias mkwall="watch microk8s.kubectl get pods --all-namespaces"

# TODO use "open" instead of "xdg-open" on a mac - also redirect xdg-open std{out,err} to /dev/null
# [mkp] open kubernetes dashboard with proxy
alias mkp="xdg-open 'http://localhost:8001/api/v1/namespaces/kube-system/services/https:kubernetes-dashboard:/proxy/' & microk8s.kubectl proxy"

# [mkwatch] watch resource
mkwatch() {
    local kind="$1"
    [ -z "$kind" ] && printf "mkwatch: missing argument.\nUsage: kwatch RESOURCE\n" && return 255
    if _isClusterSpaceObject "$kind" ; then
        microk8s.kubectl get "${kind}" | _inline_fzf | awk '{print $1}' | xargs watch microk8s.kubectl get "${kind}"
    else
        microk8s.kubectl get "${kind}" --all-namespaces | _inline_fzf | awk '{print $1, $2}' | xargs watch microk8s.kubectl get "${kind}" -n
    fi
}

# [mkcmd] create a pod and execute a cmd/image (default bash/ubuntu) usage: "mkcmd cmd" or "kcmd cmd image"
mkcmd() {
    local cmd="$1"
    local image="ubuntu"
    if [ -n "$2" ]; then
        image="$2"
    fi
    local ns="$(microk8s.kubectl get ns | _inline_fzf | awk '{print $1}')"
    if [ -n "$cmd" ]; then
        microk8s.kubectl run shell-$RANDOM --namespace $ns --rm -i --tty --image ${image} -- /bin/sh -c "${cmd}"
    else
        microk8s.kubectl run shell-$RANDOM --namespace $ns --rm -i --tty --image ${image} -- bash
    fi
}

# [mkube_ctx_name] get the current context
mkube_ctx_name() {
    microk8s.kubectl config current-context
}

# [mkube_ctx_namespace] get current namespace
mkube_ctx_namespace() {
    local default_ns="$(microk8s.kubectl config view --minify|grep namespace: |sed 's/namespace: //g'|tr -d ' ')"
    default_ns="${default_ns:-default}"
    echo "$default_ns"
}

# [mkget] get a resource by its YAML
mkget() {
    local kind="$1"
    [ -z "$kind" ] && printf "mkget: missing argument.\nUsage: kget RESOURCE\n" && return 255
    if _isClusterSpaceObject "$kind" ; then
        microk8s.kubectl get "$kind" | _inline_fzf | awk '{print $1}' | xargs microk8s.kubectl get -o yaml "$kind"
    else
        microk8s.kubectl get "$kind" --all-namespaces | _inline_fzf | awk '{print $1, $2}' | xargs microk8s.kubectl get -o yaml "$kind" -n
    fi
}

# [mkexp] as former `--export` field removes unwanted metadata - usage: COMMAND | mkexp
mkexp(){
  if [ -t 0 ]; then
    echo "mkexp has no piped input!"
    echo "usage: COMMAND | mkexp"
  else
    # remove not neat fields
    microk8s.kubectl neat
  fi
}

# [mkget-exp] get a resource by its YAML as former `--export` flag
mkget-exp() {
    kget "$@" | mkexp
}

# [mked] edit a resource by its YAML
mked() {
    local kind="$1"
    if [ -z "$kind" ]; then
      echo "mked requires resource-type (pod,deployment,...) as argument."
      return 255
    fi
    local edit_args
    if _isClusterSpaceObject $kind ; then
        edit_args=( $(microk8s.kubectl get "$kind" | _inline_fzf | awk '{print $1}') )
    else
        edit_args=( $(microk8s.kubectl get "$kind" --all-namespaces | _inline_fzf | awk '{print "-n", $1, $2}') )
    fi
    microk8s.kubectl edit "$kind" ${edit_args[*]}
}

# [mkdes] describe resource
mkdes() {
    local kind="$1"
    [ -z "$kind" ] && printf "kdes: missing argument.\nUsage: mkdes RESOURCE\n" && return 255
    if _isClusterSpaceObject "$kind" ; then
        microk8s.kubectl get "$kind" | _inline_fzf | awk '{print $1}' | xargs microk8s.kubectl describe "$kind"
    else
        microk8s.kubectl get "$kind" --all-namespaces | _inline_fzf | awk '{print $1, $2}' | xargs microk8s.kubectl describe "$kind" -n
    fi
}

# [mkdel] delete resource
mkdel() {
    local kind="$1"
    [ -z "$kind" ] && printf "mkdel: missing argument.\nUsage: mkdel RESOURCE\n" && return 255
    if _isClusterSpaceObject "$kind" ; then
        microk8s.kubectl get "$kind" | _inline_fzf | awk '{print $1}' | xargs -p microk8s.kubectl delete "$kind"
    else
        microk8s.kubectl get "$kind" --all-namespaces | _inline_fzf | awk '{print $1, $2}' | xargs -p microk8s.kubectl delete "$kind" -n
    fi
}

# [mklog] fetch log from container
_mklog_usage() {
  cat <<'EOF'
Usage: mklog [LINECOUNT] [options]

First argument is interpreted as LINECOUNT if it matches integer syntax.
Additional `options` are passed on (see `microk8s.kubectl logs --help` for details).
EOF
}
mklog() {
    [ "$1" = "--help" ] && _mklog_usage && return
    local line_count=10
    if [[ $1 =~ ^[-]{0,1}[0-9]+$ ]]; then
        line_count="$1"
        shift
    fi

    local arg_pair=$(microk8s.kubectl get po --all-namespaces | _inline_fzf | awk '{print $1, $2}')
    [ -z "$arg_pair" ] && printf "mklog: no pods found. no logs can be shown.\n" && return
    local containers_out=$(echo "$arg_pair" | xargs microk8s.kubectl get po -o=jsonpath='{.spec.containers[*].name} {.spec.initContainers[*].name}' -n | sed 's/ $//')
    local container_choosen=$(echo "$containers_out" |  tr ' ' "\n" | _inline_fzf_nh)
    microk8s.kubectl logs -n ${arg_pair} -c "${container_choosen}" --tail="${line_count}" "$@"
}

# [mkex] execute command in container
mkex() {
    [ -z "$1" ] && printf "mkex: missing argument(s).\nUsage: kex COMMAND [arguments]\n" && return 255
    local arg_pair=$(microk8s.kubectl get po --all-namespaces | _inline_fzf | awk '{print $1, $2}')
    [ -z "$arg_pair" ] && printf "kex: no pods found. no execution.\n" && return
    local containers_out=$(echo "$arg_pair" | xargs microk8s.kubectl get po -o=jsonpath='{.spec.containers[*].name}' -n)
    local container_choosen=$(echo "$containers_out" |  tr ' ' "\n" | _inline_fzf_nh)
    microk8s.kubectl exec -it -n ${arg_pair} -c "${container_choosen}" -- "$@"
}

# [mkfor] port-forward a container port to your local machine
mkfor() {
    local port="$1"
    [ -z "$port" ] && printf "kfor: missing argument.\nUsage: mkfor PORT_TO_FORWARD\n" && return 255
    local arg_pair="$(microk8s.kubectl get po --all-namespaces | _inline_fzf | awk '{print $1, $2}')"
    [ -z "$arg_pair" ] && printf "kfor: no pods found. no forwarding.\n" && return
    microk8s.kubectl port-forward -n $arg_pair "$port"
}

# [mksearch] search for string in resources
mksearch() {
    local search_query="$1"
    [ -z "$search_query" ] && printf "ksearch: missing argument.\nUsage: mksearch SEARCH_QUERY\n" && return 255
    for ns in $(microk8s.kubectl get --export -o=json ns | jq -r '.items[] | .metadata.name'); do
        microk8s.kubectl --namespace="${ns}" get --export -o=json \
            deployment,ingress,daemonset,secrets,configmap,service,serviceaccount,statefulsets,pod,endpoints,customresourcedefinition,events,networkpolicies,persistentvolumeclaims,persistentvolumes,replicasets,replicationcontrollers,statefulsets,storageclasses | \
        jq '.items[]' -c | \
        grep "$search_query" | \
        jq -r  '. | [.kind, .metadata.name] | @tsv' | \
        awk -v prefix="$ns" '{print "microk8s.kubectl get -n " prefix " " $0}'
    done
}

# [mkcl] context list
alias mkcl='microk8s.kubectl config get-contexts'

# [mkcs] context set
mkcs() {
    local context="$(microk8s.kubectl config get-contexts | _inline_fzf | cut -b4- | awk '{print $1}')"
    microk8s.kubectl config set current-context "${context}"
}

# [mkcns] context set default namespace
mkcns() {
    local ns="$1"
    if [ -z "$ns" ]; then
        ns="$(microk8s.kubectl get ns | _inline_fzf | awk '{print $1}')"
    fi
    [ -z "$ns" ] && printf "kcns: no namespace selected/found.\nUsage: mkcns [NAMESPACE]\n" && return
    microk8s.kubectl config set-context "$(microk8s.kubectl config current-context)" --namespace="${ns}"
}

# [mkwns] watch pods in a namespace
mkwns() {
    local ns=$(microk8s.kubectl get ns | _inline_fzf | awk '{print $1}')
    [ -z "$ns" ] && printf "mkcns: no namespace selected/found.\nUsage: mkwns\n" && return
    watch microk8s.kubectl get pod -n "$ns"
}


# [mkonsole] create root shell on a node
mkonsole() {
    local node_hostname="$(microk8s.kubectl get node --label-columns=kubernetes.io/hostname | _inline_fzf | awk '{print $6}')"
    local ns="$(microk8s.kubectl get ns | _inline_fzf | awk '{print $1}')"
    local name=shell-$RANDOM
    local overrides='
{
    "spec": {
        "hostPID": true,
        "hostNetwork": true,
        "tolerations": [
            {
                "operator": "Exists",
                "effect": "NoSchedule"
            },
            {
                "operator": "Exists",
                "effect": "NoExecute"
            }
        ],
        "containers": [
            {
                "name": "'$name'",
                "image": "alpine",
                "command": [
                    "/bin/sh"
                ],
                "args": [
                    "-c",
                    "nsenter -t 1 -m -u -i -n -p -- bash"
                ],
                "resources": null,
                "stdin": true,
                "stdinOnce": true,
                "terminationMessagePath": "/dev/termination-log",
                "terminationMessagePolicy": "File",
                "tty": true,
                "securityContext": {
                    "privileged": true
                }
            }
        ],
        "nodeSelector": {
            "kubernetes.io/hostname": "'$node_hostname'"
        }
    }
}
'
    microk8s.kubectl run $name --namespace "$ns" --rm -it --image alpine --overrides="${overrides}"
}

# [mksec] decode a value from a secret
mksec () {
    ns=$(microk8s.kubectl get ns | _inline_fzf | awk '{print $1}')
    local secret=$(microk8s.kubectl get secret -n "$ns" | _inline_fzf | awk '{print $1}')
    local key=$(microk8s.kubectl get secret -n "$ns" "$secret" -o json | jq -r '.data | to_entries[] | "\(.key)"' | _inline_fzf_nh)
    microk8s.kubectl view-secret -n "$ns" "$secret" "$key"
}

#### Kubermatic KKP specific
# [mkkp-cluster] Kubermatic KKP - extracts kubeconfig of user cluster and connects it in a new bash
mkkp-cluster () {
	TMP_KUBECONFIG=$(mktemp)
	local cluster="$(microk8s.kubectl get cluster | _inline_fzf | awk '{print $1}')"
	microk8s.kubectl get secret admin-kubeconfig -n cluster-$cluster -o go-template='{{ index .data "kubeconfig" }}' | base64 -d > $TMP_KUBECONFIG
	KUBECONFIG=$TMP_KUBECONFIG $SHELL
}

# [mkhelp] show this help message
mkhelp() {
    echo "Usage of mfubectl"
    echo
    echo "Reduces repetitive interactions with microk8s.kubectl"
    echo "Find more information at https://github.com/kubermatic/fubectl"
    echo
    echo "Usage:"
    if [ -n "$ZSH_VERSION" ]
    then
        grep -E '^# \[.+\]' "${(%):-%x}"
    else
        grep -E '^# \[.+\]' "${BASH_SOURCE[0]}"
    fi
}

